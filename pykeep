#! /usr/bin/env python
import os
import sys
import time
import filecmp
from shutil import copyfile

# path to the configuration file
update_conf = 'conf.pykeep'


def old_file(path):
    (path_head, path_tail) = os.path.split(path)
    path_tail = '.' + path_tail + '_old'
    if path_head == '':
        return path_tail
    return path_head + '/' + path_tail


def update(src_dst, init, back, check, L):
    if init:
        for mv in src_dst:
            (src, dst) = mv
            if (not os.path.isfile(src)) \
               or (not filecmp.cmp(src, dst) and src in L):
                copyfile(dst, src)
                print('Imported : ' + src + ' from ' + dst)
    elif back:
        for mv in src_dst:
            (src, dst) = mv
            dst_old = old_file(dst)
            if os.path.isfile(dst_old) and src in L:
                if os.access(dst, os.W_OK):
                    copyfile(dst_old, dst + '_tmp')
                    copyfile(dst, dst_old)
                    copyfile(dst + '_tmp', dst)
                    os.remove(dst + '_tmp')
                    print('Backed : ' + dst)
                else:
                    print('Permission Denied to replace ' + dst + ' with '
                          + dst_old + '\nTry using root')
    elif check:
        for mv in src_dst:
            (src, dst) = mv
            (src_head, src_tail) = os.path.split(src)
            if os.path.isfile(src) and os.path.isfile(dst):
                src_mtime = time.ctime(os.path.getmtime(src))
                dst_mtime = time.ctime(os.path.getmtime(dst))
                if src_mtime < dst_mtime or filecmp.cmp(src, dst):
                    print(src_tail + ' is up to date')
                elif src_mtime > dst_mtime or not filecmp.cmp(src, dst):
                    print(src_tail + " needs to be updated, use './pykeep'")
                else:
                    print(src_tail + " is older than destination, use "
                          "'./pykeep -i " + src_tail + "' to update it")
    else:
        for mv in src_dst:
            (src, dst) = mv
            if not filecmp.cmp(src, dst):
                if os.access(dst, os.W_OK):
                    copyfile(dst, old_file(dst))
                    copyfile(src, dst)
                    print('Updated : ' + src)
                else:
                    print('Permission Denied to replace ' + dst + ' with '
                          + src + "\nTry using root")


def read_line(line):
    src, dst = '', ''
    test, start = False, False
    b1, b2 = 0, 0
    for char in line:
        if char == chr(34) or char == chr(39):
            if b1 < 2:
                b1 += 1
            elif test:
                b2 += 1
                if b2 == 2:
                    break
        if b1 == 1:
            if start:
                src += char
            else:
                start = True
        else:
            if b1 == 2 and char == '>':
                test = True
                start = False
            elif b2 == 1:
                if start:
                    dst += char
                else:
                    start = True
    return src, dst


def read_conf(init, back, check, L):
    if os.path.isfile(update_conf):
        conf = open(update_conf, 'r')
        src_dst = []
        for line in conf:
            for char in line:
                if char == '#':
                    break
                if char != ' ':
                    (src, dst) = read_line(line)
                    if (os.path.isfile(src) and os.path.isfile(dst)) \
                       or (init and os.path.isfile(dst)):
                        src_dst.append((src, dst))
                    break
        update(src_dst, init, back, check, L)
    else:
        print("Can't find any configuration file, use './pykeep -f'"
              " to create one")


def create_config_file():
    conffile = open('conf.pykeep', 'w+')
    conffile.write("#==============================#\n"
                   "# -- # Pykeep config file # -- #\n"
                   "#==============================#\n \n"
                   "# exemple line :\n"
                   "# 'i3config' > '../.config/i3/config'")
    conffile.close()


def argv_list(l):
    L = []
    for i in range(2, l):
        L.append(sys.argv[i])
    return L


if __name__ == '__main__':
    argv_len = len(sys.argv)
    if argv_len >= 2 and sys.argv[1] == '-i':
        read_conf(True, False, False, argv_list(argv_len))
    else:
        if argv_len >= 2:
            if sys.argv[1] == '-b':
                if argv_len > 2:
                    read_conf(False, True, False, argv_list(argv_len))
            elif sys.argv[1] == '-c':
                read_conf(False, False, True, argv_list(argv_len))
        else:
            if argv_len == 1:
                read_conf(False, False, False, [])
            else:
                if sys.argv[1] == '-f':
                    yn = 'y'
                    if os.path.isfile('conf.pykeep'):
                        yn = str(input('You already have a'
                                       'configuration file\n'
                                       'Would you like to replace it ? y/n: '))
                    if yn == 'y':
                        create_config_file()
                        print("Created a config file 'conf.pykeep'")
                else:
                    if sys.argv[1] == '-h':
                        print('See https://github.com/Dirtyhenki/pykeep')
                    else:
                        print('Unknown argument : ' + sys.argv[1])
