#! /usr/bin/env python
import sys
import os
import filecmp
from shutil import copyfile

# path to the configuration file
update_conf = "conf.pykeep"

#Global Values
init = False
list_in = []

def update(src_dst):
    if init:
        for mv in src_dst:
            (src, dst) = mv
            if not os.path.isfile(src) or (not filecmp.cmp(src, dst) and src in L):
                copyfile(dst, src)
                print("Imported : " + src + " from " + dst)
    else:
        for mv in src_dst:
            (src, dst) = mv
            if not filecmp.cmp(src, dst):
                if os.access(dst,os.W_OK):
                    copyfile(dst,dst+"_old")
                    copyfile(src, dst)
                    print("Updated : " + src)
                else:
                    print("Permission Denied to replace " + dst + " by " + src + "\nTry using root")

def read_line(line):
    src, dst = "", ""
    test, start = False, False 
    b1, b2 = 0, 0
    for char in line:
	if char == chr(34) or char == chr(44):
            if b1 < 2:
                b1 += 1
            elif test:
                b2 +=1
                if b2 == 2:
                    break
        if b1 == 1:
            if start:
                src += char
            else: 
                start = True
        else:
            if b1 == 2 and char == ">":
                test = True
                start = False
            elif b2 == 1:
                if start:
                    dst += char
                else: 
                    start = True
    return src, dst

def read_conf(i = False, L = []):
    if not os.path.isfile(update_conf):
        return
    if i == True :
        global init, list_in
        init = True
        list_in = L
    conf = open(update_conf, "r")
    src_dst = []
    for line in conf:
        for char in line:
            if char == "#":
                break
            if char != " ":
                (s, d) = read_line(line)
                if (os.path.isfile(s) and os.path.isfile(d)) or (init and os.path.isfile(d)): 
                    src_dst.append((s, d))
                break
    update(src_dst)

def create_config_file():
    conffile = open("conf.pykeep","w+")
    conffile.write("#==============================#\n# -- # Pykeep config file # -- #\n#==============================#\n\n# exemple line :\n# 'i3config' > '../.config/i3/config'")
    conffile.close()

if __name__ == "__main__":
    l = len(sys.argv)
    if  l > 2 and sys.argv[1] == "-i":
        i, L = 2, []
        while i < l:
            L.append(sys.argv[i])
            i += 1
        read_conf(True, L)
    else:
        if l == 1:
            if not os.path.isfile(update_conf):
                print("Can't find the configuration file use -f to create one or verify the path to your file")
            else:
                read_conf()
        else:
            if sys.argv[1] == "-f":
                yn = "y"
                if os.path.isfile("conf.pykeep"):
                    yn = raw_input("You already have a configuration file\nWould you like to replace it ? y/n : ")
                if yn == "y":
                    create_config_file()
                    print("created a config file 'conf.pykeep'")
            else:
                if sys.argv[1] == "-h":
                    print("See https://github.com/Dirtyhenki/pykeep")
                else:
                    print("unknown argument")
